{"version":3,"file":"static/webpack/static\\development\\pages\\events.js.29898558cb88a5b1d818.hot-update.js","sources":["webpack:///./pages/events.js"],"sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'next/router';\r\nimport ResponsiveDrawer from '../components/ResponsiveDrawer';\r\nimport ContactDialog from '../components/ContactDialog';\r\nimport NPS_Query from '../components/api/NPS_Query';\r\nimport getTimeRange from '../components/utils/getTimeRange';\r\nimport getDateRange from \"../components/utils/getDateRange\";\r\nimport getTimeZone from '../components/utils/getTimeZone';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {\r\n    Chip,\r\n    Grid,\r\n    Paper,\r\n    Hidden,\r\n    Button,\r\n    Typography,\r\n    ExpansionPanel,\r\n    ExpansionPanelDetails,\r\n    ExpansionPanelSummary,\r\n    makeStyles\r\n} from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport '../static/default.css';\r\nimport ButtonDialog from \"../components/ButtonDialog\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root:{\r\n        flexGrow: 1,\r\n        width: \"100%\",\r\n    },\r\n    paper:{\r\n        padding: theme.spacing(2),\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    singlecolumn: {\r\n        flexBasis: \"100%\",\r\n        position: \"relative\",\r\n    },\r\n    grid: {\r\n        [theme.breakpoints.up('xs')]: {\r\n            paddingLeft: theme.spacing(0),\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            paddingLeft: theme.spacing(30),\r\n        },\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        float: 'left',\r\n    },\r\n    image: {\r\n        width: \"100%\",\r\n        position: \"relative\",\r\n        objectFit: 'cover',\r\n    },\r\n    p: {\r\n        width: \"100%\",\r\n    },\r\n    maintitle: {\r\n        [theme.breakpoints.up('xs')]:{\r\n            fontSize: 'large',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction CenteredGrid({state, events}){\r\n    const classes = useStyles();\r\n\r\n    function sanitized(string){\r\n        return string.replace(/(&nbsp;|<([^>]+)>)/ig, \"\");\r\n    }\r\n\r\n    return(\r\n        <main className={classes.content}>\r\n            <div className={classes.toolbar}/>\r\n            <Grid container spacing={3} className={classes.grid}>\r\n                {events.map((eventObj) => (\r\n                    <Grid item xs={12} md={6} lg={6}>\r\n                        <Paper className={classes.p}>\r\n                            <ExpansionPanel>\r\n                                <ExpansionPanelSummary\r\n                                    expandIcon={<ExpandMoreIcon/>}\r\n                                    aria-controls=\"panel1c-content\"\r\n                                    id=\"panel1c-header\"\r\n                                >\r\n                                    <Typography color=\"textPrimary\" variant=\"h3\" style={{fontWeight: 'bold'}} className={classes.maintitle}>\r\n                                        {eventObj.title + \" \"}\r\n                                        {(eventObj.category.length > 0) ? <Chip label={eventObj.category} className={classes.chip} style={{backgroundColor: \"#29c609\"}}/> : <span/>}\r\n                                        {eventObj.types.map((type) => (\r\n                                            <Chip label={type} className={classes.chip} style={{backgroundColor: \"#29c609\"}}/>\r\n                                        ))}\r\n                                        {(eventObj.organizationname.length > 0) ? <Chip label={eventObj.organizationname} className={classes.chip} style={{backgroundColor: \"#86fdff\"}}/> : <span/> }\r\n                                        {(eventObj.isfree.length >  0 && !eventObj.isfree.toLowerCase().includes(\"false\")) ? <Chip label=\"Free\" className={classes.chip} style={{backgroundColor: \"#29c609\"}}/> : <span/>}\r\n                                        {(eventObj.isregresrequired.length > 0 && !eventObj.isregresrequired.toLowerCase().includes(\"false\")) ? <Chip label=\"Registration Required\" className={classes.chip} style={{backgroundColor: \"#29c609\"}}/> : <span/>}\r\n                                        {(eventObj.isallday.length > 0 && !eventObj.isallday.toLowerCase().includes(\"false\")) ? <Chip label=\"All Day\" className={classes.chip} style={{backgroundColor: \"#ffc570\"}}/> : <span/> }\r\n                                        {(eventObj.isrecurring.length > 0 && !eventObj.isrecurring.toLowerCase().includes(\"false\")) ? <Chip label=\"Recurring\" className={classes.chip} style={{backgroundColor: \"#ffc570\"}}/> : <span/> }\r\n                                        {eventObj.tags.map((tag) => (\r\n                                            <Chip label={tag} className={classes.chip} style={{backgroundColor: \"#ffc570\"}}/>\r\n                                        ))}\r\n                                    </Typography>\r\n                                </ExpansionPanelSummary>\r\n                                <ExpansionPanelDetails>\r\n                                    <div style={{width: \"100%\"}}>\r\n                                        <div className=\"events-left\">\r\n                                            <Typography variant=\"h3\" color=\"textPrimary\" style={{fontWeight: 'bold'}}>\r\n                                                When\r\n                                            </Typography>\r\n                                            <Typography variant=\"h5\" color=\"textSecondary\" style={{fontWeight: 'bold'}}>\r\n                                                {(eventObj.date.length > 0) ? getDateRange(eventObj.date, eventObj.dateend) : \"\"}\r\n                                            </Typography>\r\n                                            {eventObj.times.map((timeRange) => (\r\n                                                <Typography variant=\"h5\" color=\"textSecondary\" style={{fontWeight: 'bold'}}>\r\n                                                    {(timeRange.timestart.length > 0 || timeRange.timeend.length > 0) ? getTimeRange(timeRange.timestart, timeRange.timeend) + \" \" + getTimeZone(state):  \"\"}\r\n                                                </Typography>\r\n                                            ))}\r\n                                        </div>\r\n                                        <div className=\"events-right\">\r\n                                            <Typography variant=\"h3\" color=\"textPrimary\" style={{fontWeight: 'bold'}}>\r\n                                                Where\r\n                                            </Typography>\r\n                                            <Typography variant=\"h5\" color=\"textSecondary\" style={{fontWeight: 'bold'}}>\r\n                                                {eventObj.location}\r\n                                            </Typography>\r\n                                        </div>\r\n                                        <ContactDialog name={eventObj.contactname} phone={eventObj.contacttelephonenumber} email={eventObj.contactemailaddress}/>\r\n                                        <ButtonDialog buttonName=\"Registration\" text={eventObj.regresinfo} other=\"Details\" otherurl={eventObj.regresurl}/>\r\n                                        <ButtonDialog buttonName=\"Payment\" text={eventObj.feeinfo}/>\r\n                                        <Hidden smUp>\r\n                                            <div className={classes.singlecolumn}>\r\n                                                <Typography paragraph style={{display: \"block\"}}>\r\n                                                    {sanitized(eventObj.description)}\r\n                                                </Typography>\r\n                                            </div>\r\n                                        </Hidden>\r\n                                    </div>\r\n                                    <Hidden xsDown>\r\n                                        <div className={classes.singlecolumn}>\r\n                                            <Typography paragraph>\r\n                                                {sanitized(eventObj.description)}\r\n                                            </Typography>\r\n                                        </div>\r\n                                    </Hidden>\r\n                                </ExpansionPanelDetails>\r\n                            </ExpansionPanel>\r\n                        </Paper>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </main>\r\n    )\r\n}\r\n\r\nconst Events = withRouter( props => (\r\n    <div style={{\r\n        root:{\r\n            flexGrow: 1,\r\n        },\r\n    }}>\r\n        <ResponsiveDrawer name={props.parks.data[0].fullName + \" Events\"} park={props.router.query.objectId}/>\r\n        <CenteredGrid events={props.events.data} state={props.parks.data[0].states}/>\r\n    </div>\r\n));\r\n\r\nEvents.getInitialProps = async function(context) {\r\n    const {objectId} = context.query;\r\n    const res = await fetch(NPS_Query(\"parks\", objectId));\r\n    const parks = await res.json();\r\n\r\n    const res2 = await fetch(NPS_Query(\"events\", objectId));\r\n    const events = await res2.json();\r\n\r\n    console.log(`Fetched ${parks.data[0].fullName}`);\r\n\r\n    return {parks, events};\r\n};\r\n\r\nexport default Events;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AAEA;AADA;AA5CA;AAAA;AACA;AAiDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AA7DA;AA0EA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AAEA;AARA;AAUA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}