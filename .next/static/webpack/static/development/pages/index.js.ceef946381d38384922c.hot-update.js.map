{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.ceef946381d38384922c.hot-update.js","sources":["webpack:///./components/CustomButton.js"],"sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport LocationIcon from '@material-ui/icons/LocationSearchingOutlined';\r\nimport searchClient from '../components/SearchClient';\r\n\r\nconst index = searchClient.initIndex(\"Parks\");\r\n\r\nclass ButtonComponent extends React.Component{\r\n    state = {\r\n        loading: false,\r\n        userlat: null,\r\n        userlong: null,\r\n        parkData: null,\r\n    };\r\n    render(){\r\n        const loading = this.state.loading;\r\n        return(\r\n            <div>\r\n                <Button color=\"secondary\" variant=\"contained\" size=\"large\" onClick={this.handleSubmit} style={{\r\n                    width: \"100%\",\r\n                    fontSize: 30,\r\n                    color: \"#FFFFFF\"\r\n                }}>\r\n                    Find the nearest point of interest\r\n                    <LocationIcon style={{\r\n                        paddingLeft: '10px',\r\n                    }} />\r\n                </Button>\r\n                <Fade in={loading}>\r\n                    <LinearProgress/>\r\n                </Fade>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    showPosition = (position) => {\r\n        this.setState(state => ({\r\n            userlat: position.coords.latitude,\r\n            userlong: position.coords.longitude,\r\n        }));\r\n        this.handleSubmit();\r\n    };\r\n\r\n    showError = (err) => {\r\n        console.warn('error');\r\n    };\r\n\r\n    getLocation = () => {\r\n        if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(this.showPosition);\r\n        }\r\n        else {\r\n            alert(\"Geolocation isn't supported by device hardware.\");\r\n        }\r\n    };\r\n\r\n    indexData = () => {\r\n        const browser = index.browseAll(\"\", {\r\n            attributesToRetrieve:[\r\n                'latLong',\r\n                'parkCode',\r\n            ]\r\n        });\r\n        let hits = [];\r\n\r\n        browser.on('result', content => {\r\n            hits = hits.concat(content.hits);\r\n            this.state.parkData = hits;\r\n            this.handleSubmit();\r\n        });\r\n\r\n        browser.on('end', () => {\r\n            console.log(`${hits.length} total responses.`);\r\n        });\r\n\r\n        browser.on('error', err => {\r\n            throw err;\r\n        });\r\n    };\r\n\r\n    calculateDistance = (coords) => {\r\n        return coords.length > 1 ? Math.sqrt(Math.pow(coords[1] - this.state.userlong, 2) + Math.pow(coords[0] - this.state.userlat, 2)) : 360;\r\n    };\r\n\r\n    handleSubmit = () => {\r\n        this.setState(state => ({\r\n            loading: true\r\n        }));\r\n        if(this.state.userlat == null || this.state.userlong == null){\r\n            this.getLocation();\r\n            return false;\r\n        }\r\n        console.log(this.state.userlat);\r\n        console.log(this.state.userlong);\r\n        if(this.state.parkData == null){\r\n            this.indexData();\r\n            return false;\r\n        }\r\n        console.log(this.state.parkData);\r\n        var nearestPOI = {\r\n            parkCode: null,\r\n            lat: 180.0,\r\n            long: 360.0,\r\n            distance: 360.0\r\n        };\r\n        for (var i = 0; i < this.state.parkData.length; i++){\r\n            const parkCoords = this.state.parkData[i].latLong.replace(/[^\\d.,-]/g, '').split(\",\").map(Number);\r\n            const parkDistance = this.calculateDistance(parkCoords);\r\n            if (parkDistance < nearestPOI.distance){\r\n                nearestPOI.parkCode = this.state.parkData[i].parkCode;\r\n                nearestPOI.lat = parkCoords[0];\r\n                nearestPOI.long = parkCoords[1];\r\n                nearestPOI.distance = parkDistance;\r\n            }\r\n        }\r\n        console.log(nearestPOI.parkCode);\r\n        window.location.href = \"/details?objectId=\" + nearestPOI.parkCode;\r\n    }\r\n}\r\n\r\nexport default ButtonComponent;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AA0BA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAMA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;AAxGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAMA;AACA;AADA;AAAA;AAIA;AAAA;AAKA;;;;AA1BA;AACA;AAgHA;;;;A","sourceRoot":""}