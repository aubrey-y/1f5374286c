{"version":3,"file":"static/webpack/static\\development\\pages\\alerts.js.be8283fb46456d368eb7.hot-update.js","sources":["webpack:///./components/ResponsiveDrawer.js","webpack:///./pages/alerts.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n    CssBaseline,\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Divider,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Hidden,\r\n    Drawer,\r\n    IconButton,\r\n    LinearProgress,\r\n    Fade,\r\n} from \"@material-ui/core\";\r\nimport AlertIcon from '../components/SafetyCautionAlertsBlack30';\r\nimport EventsIcon from '../components/CalendarEventsBlack30';\r\nimport LessonIcon from '../components/InterpretiveExhibitBlack30';\r\nimport PlacesIcon from '../components/MapsBlack30';\r\nimport ArticlesIcon from '../components/NewspaperBlack30';\r\nimport PeopleIcon from '../components/StatueBlack30';\r\nimport VisitorCenterIcon from '../components/VisitorCenterBlack30';\r\nimport CampIcon from '../components/CampgroundBlack30';\r\nimport NewsIcon from '../components/PostOfficeBlack30';\r\nimport HomeIcon from '../components/DirectionsBlack30';\r\nimport DetailsIcon from '../components/BrochureBlack30';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Link from 'next/link';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport '../static/default.css';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    drawer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: drawerWidth,\r\n            flexShrink: 0,\r\n        },\r\n    },\r\n    appBar: {\r\n        marginLeft: drawerWidth,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: `calc(100% - ${drawerWidth}px)`,\r\n        },\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'none',\r\n        },\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n}));\r\n\r\nfunction ResponsiveDrawer(props){\r\n    const {container} = props;\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [mobileOpen, setMobileOpen] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    function handleDrawerToggle(){\r\n        setMobileOpen(!mobileOpen);\r\n    }\r\n\r\n    function handleSubmit(){\r\n        setLoading(true);\r\n    }\r\n\r\n    const drawer = (\r\n        <div>\r\n            <div className={classes.toolbar}/>\r\n            <Divider/>\r\n            <List>\r\n                <a id=\"hitbox\" href=\"/\">\r\n                    <ListItem button onClick={handleSubmit}>\r\n                        <ListItemIcon>\r\n                            <HomeIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Search Home\"/>\r\n                    </ListItem>\r\n                </a>\r\n                <a id=\"hitbox\" href={`details?objectId=${props.park}`}>\r\n                    <ListItem button onClick={handleSubmit}>\r\n                        <ListItemIcon>\r\n                            <DetailsIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Details\"/>\r\n                    </ListItem>\r\n                </a>\r\n            </List>\r\n            <Divider/>\r\n            <List>\r\n                {['Alerts', 'Articles', 'Events', 'News Releases'].map((text, index) => (\r\n                    <Link as={`/${props.park}/${text.toLowerCase().replace(\" \", \"-\")}`} href={`/${text.toLowerCase().replace(\" \", \"\")}?objectId=${props.park}`}>\r\n                        <ListItem button key={text} onClick={handleSubmit}>\r\n                            <ListItemIcon>\r\n                                {index === 0 ? <AlertIcon/>: index === 1 ? <ArticlesIcon/>: index === 2 ? <EventsIcon/>: <NewsIcon/>}\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={text}/>\r\n                        </ListItem>\r\n                    </Link>\r\n                ))}\r\n            </List>\r\n            <Divider/>\r\n            <List>\r\n                {['Campgrounds', 'Visitor Centers'].map((text, index) => (\r\n                    <Link as={`/${props.park}/${text.toLowerCase().replace(\" \", \"-\")}`} href={`/${text.toLowerCase().replace(\" \", \"\")}?objectId=${props.park}`}>\r\n                        <ListItem button key={text} onClick={handleSubmit}>\r\n                            <ListItemIcon>\r\n                                {index === 0 ? <CampIcon/>: <VisitorCenterIcon/>}\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={text}/>\r\n                        </ListItem>\r\n                    </Link>\r\n                ))}\r\n            </List>\r\n            <Divider/>\r\n            <List>\r\n                {['Lesson Plans', 'People', 'Places'].map((text, index) => (\r\n                    <Link as={`/${props.park}/${text.toLowerCase().replace(\" \", \"-\")}`} href={`/${text.toLowerCase().replace(\" \", \"\")}?objectId=${props.park}`}>\r\n                        <ListItem button key={text} onClick={handleSubmit}>\r\n                            <ListItemIcon>\r\n                                {index === 0 ? <LessonIcon/>: index === 1 ? <PeopleIcon/>: <PlacesIcon/>}\r\n                            </ListItemIcon>\r\n                            <ListItemText primary={text}/>\r\n                        </ListItem>\r\n                    </Link>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n\r\n    return(\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar} style={{backgroundColor: \"#0096db\"}}>\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"Open drawer\"\r\n                        edge=\"start\"\r\n                        onClick={handleDrawerToggle}\r\n                        className={classes.menuButton}\r\n                    >\r\n                        <MenuIcon/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" noWrap>\r\n                        {props.name}\r\n                    </Typography>\r\n                </Toolbar>\r\n                <Fade in={loading}>\r\n                    <LinearProgress/>\r\n                </Fade>\r\n            </AppBar>\r\n            <nav className={classes.drawer}>\r\n                <Hidden smUp implementation=\"css\">\r\n                    <Drawer\r\n                        container={container}\r\n                        variant=\"temporary\"\r\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n                        open={mobileOpen}\r\n                        onClose={handleDrawerToggle}\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        ModalProps={{\r\n                            keepMounted: true,\r\n                        }}\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n                <Hidden xsDown implementation=\"css\">\r\n                    <Drawer\r\n                        classes={{\r\n                            paper: classes.drawerPaper,\r\n                        }}\r\n                        variant=\"permanent\"\r\n                        open\r\n                    >\r\n                        {drawer}\r\n                    </Drawer>\r\n                </Hidden>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResponsiveDrawer;","import React from 'react';\r\nimport {withRouter} from 'next/router';\r\nimport ResponsiveDrawer from '../components/ResponsiveDrawer';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    Typography,\r\n    Chip,\r\n    Button,\r\n    Divider,\r\n} from '@material-ui/core';\r\nimport NPS_Query from '../components/NPS_Query';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root:{\r\n        flexGrow: 1,\r\n    },\r\n    paper:{\r\n        padding: theme.spacing(2),\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    grid:{\r\n        [theme.breakpoints.up('xs')]: {\r\n            paddingLeft: theme.spacing(0),\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            paddingLeft: theme.spacing(30),\r\n        },\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nfunction CenteredGrid({alerts}){\r\n    const classes = useStyles();\r\n    // var states = [];\r\n    // for(var i = 0; i < alerts.length; i++){\r\n    //     const [open, setOpen] = React.useState(false);\r\n    //     states.push([open, setOpen]);\r\n    // }\r\n    // const [scroll, setScroll] = React.useState('body');\r\n    //\r\n    // const handleClick = (scrollType, index) => () => {\r\n    //     states[index][1](true);\r\n    //     setScroll(scrollType);\r\n    // };\r\n    //\r\n    // const handleClose = (index) => () => {\r\n    //     states[index][1](false);\r\n    // };\r\n\r\n    return(\r\n        <main className={classes.content}>\r\n            <div className={classes.toolbar}/>>\r\n            <Grid container spacing={3} className={classes.grid}>\r\n                {alerts.map((alertObj, index) => (\r\n                    <Grid item xs>\r\n                        <Paper className={classes.paper}>\r\n                            <Chip label={alertObj.category} className={classes.chip} color=\"secondary\"/>\r\n                            <Typography color=\"textPrimary\" variant=\"h4\">\r\n                                {alertObj.title}\r\n                            </Typography>\r\n                            <Divider/><br/>\r\n                            <Typography paragraph>\r\n                                {alertObj.description}\r\n                            </Typography>\r\n                            {(alertObj.url.length > 0) ? <Button href={alertObj.url} color=\"primary\">More Information</Button> : <div/>}\r\n                            {/*<Button variant=\"outlined\" size=\"large\" className={classes.button} onClick={handleClick('body', index)}>Learn More</Button>*/}\r\n                            {/*<Dialog*/}\r\n                            {/*    open={states[index][0]}*/}\r\n                            {/*    onClose={handleClose(index)}*/}\r\n                            {/*    scroll={scroll}*/}\r\n                            {/*    aria-labelledby=\"scroll-diialog-title\"*/}\r\n                            {/*>*/}\r\n                            {/*    <DialogTitle id=\"scroll-dialog-title\">{alertObj.title}</DialogTitle>*/}\r\n                            {/*    <DialogContent dividers={false}>*/}\r\n                            {/*        <DialogContentText>*/}\r\n                            {/*            {alertObj.description}*/}\r\n                            {/*        </DialogContentText>*/}\r\n                            {/*    </DialogContent>*/}\r\n                            {/*    <DialogActions>*/}\r\n                            {/*        {(alertObj.url.length > 0) ? <Button href={alertObj.url} color=\"primary\">More Information</Button> : <div/>}*/}\r\n                            {/*        <Button variant=\"contained\" onClick={handleClose(index)} color=\"primary\">*/}\r\n                            {/*            Close*/}\r\n                            {/*        </Button>*/}\r\n                            {/*    </DialogActions>*/}\r\n                            {/*</Dialog>*/}\r\n                        </Paper>\r\n                    </Grid>\r\n                ))}\r\n                {(alerts.length === 0) ?\r\n                    <Grid item xs>\r\n                        <Paper className={classes.paper}>\r\n                            <Chip label=\"No Alerts Reported\" className={classes.chip} style={{\r\n                                backgroundColor: \"#29c609\",\r\n                            }}/>\r\n                            <Typography color=\"textPrimary\" variant=\"h4\">\r\n                                No Alerts Reported\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid> : <div/>}\r\n            </Grid>\r\n        </main>\r\n    )\r\n}\r\n\r\nconst Alerts = withRouter( props => (\r\n    <div style={{\r\n        root:{\r\n            flexGrow: 1,\r\n        },\r\n    }}>\r\n        <ResponsiveDrawer name={props.parks.data[0].fullName + \" Alerts\"} park={props.router.query.objectId}/>\r\n        <CenteredGrid alerts={props.alerts.data}/>\r\n    </div>\r\n));\r\n\r\nAlerts.getInitialProps = async function(context) {\r\n    const {objectId} = context.query;\r\n    const res = await fetch(NPS_Query(\"parks\", objectId));\r\n    const parks = await res.json();\r\n\r\n    const res2 = await fetch(NPS_Query(\"alerts\", objectId));\r\n    const alerts = await res2.json();\r\n\r\n    console.log(`Fetched ${parks.data[0].fullName}`);\r\n\r\n    return {parks, alerts};\r\n};\r\n\r\nexport default Alerts;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AADA;AAGA;AAEA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AADA;AAIA;AACA;AADA;AAGA;AADA;AAIA;AACA;AACA;AADA;AAvBA;AAAA;AACA;AA2BA;AAAA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AANA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AANA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAAA;AANA;AAcA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAAA;AAIA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AATA;AAgBA;AAAA;AAAA;AAEA;AACA;AADA;AAGA;AACA;AALA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtMA;AACA;AACA;AACA;AAQA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AADA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AADA;AAGA;AACA;AADA;AA1BA;AAAA;AACA;AA8BA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AAAA;AAXA;AAoCA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAPA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AAEA;AARA;AAUA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}