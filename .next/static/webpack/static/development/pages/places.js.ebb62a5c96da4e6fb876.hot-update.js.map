{"version":3,"file":"static/webpack/static\\development\\pages\\places.js.ebb62a5c96da4e6fb876.hot-update.js","sources":["webpack:///./pages/places.js"],"sourcesContent":["import React from 'react';\r\nimport {withRouter} from 'next/router';\r\nimport ResponsiveDrawer from '../components/ResponsiveDrawer';\r\nimport NPS_Query from '../components/api/NPS_Query';\r\nimport fetch from 'isomorphic-unfetch';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n    Button,\r\n    Divider,\r\n    Typography,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport '../static/default.css';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root:{\r\n        flexGrow: 1,\r\n        width: \"100%\",\r\n    },\r\n    paper:{\r\n        padding: theme.spacing(2),\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    singlecolumn: {\r\n        flexBasis: \"100%\",\r\n        position: \"relative\",\r\n    },\r\n    grid: {\r\n        [theme.breakpoints.up('xs')]: {\r\n            paddingLeft: theme.spacing(0),\r\n        },\r\n        [theme.breakpoints.up('sm')]: {\r\n            paddingLeft: theme.spacing(30),\r\n        },\r\n    },\r\n    chip: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n        float: 'left',\r\n    },\r\n    image: {\r\n        width: \"100%\",\r\n        position: \"relative\",\r\n        objectFit: 'cover',\r\n    },\r\n    p: {\r\n        [theme.breakpoints.only('xs')]:{\r\n            fontSize: \"large\",\r\n        },\r\n    },\r\n    maintitle: {\r\n        [theme.breakpoints.only('xs')]:{\r\n            fontSize: \"xx-large\"\r\n        },\r\n    },\r\n    rightIcon: {\r\n        marginLeft: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nfunction CenteredGrid({places}){\r\n    const classes = useStyles();\r\n    return(\r\n        <main className={classes.content}>\r\n            <div className={classes.toolbar}/>\r\n            <Grid container spacing={3} className={classes.grid}>\r\n                {places.map((placeObj) => (\r\n                    <Grid item xs={12} md={6} lg={6}>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography variant=\"h3\" color=\"textPrimary\" style={{fontWeight: 'bold'}} className={classes.maintitle}>\r\n                                {placeObj.title}\r\n                            </Typography>\r\n                            <Divider/><br/>\r\n                            <div id=\"trim\">\r\n                                {(placeObj.listingimage.url.length > 0) ? <img className={classes.image} src={placeObj.listingimage.url}/> : <span/> }\r\n                            </div>\r\n                            {(placeObj.listingimage.url.length > 0) ? <br/> : <span/>}\r\n                            <Typography paragraph variant=\"h4\" className={classes.p}>\r\n                                {placeObj.listingdescription}\r\n                            </Typography>\r\n                            {(placeObj.url.length > 0) ? <Button href={placeObj.url} color=\"primary\">{\"Read More About \" + placeObj.title}<LaunchIcon className={classes.rightIcon}/></Button> : <span/>}\r\n                            <Divider/>\r\n                        </Paper>\r\n                    </Grid>\r\n                ))}\r\n                {(places.length === 0) ?\r\n                    <Grid item xs>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography color=\"textPrimary\" variant=\"h4\" style={{fontWeight: 'bold'}}>\r\n                                No Notable Places Found\r\n                            </Typography>\r\n                        </Paper>\r\n                    </Grid> : <span/>}\r\n            </Grid>\r\n        </main>\r\n    )\r\n}\r\n\r\nconst Places = withRouter( props => (\r\n    <div style={{\r\n        root:{\r\n            flexGrow: 1,\r\n        },\r\n    }}>\r\n        <ResponsiveDrawer name={props.parks.data[0].fullName + \" Places\"} park={props.router.query.objectId}/>\r\n        <CenteredGrid places={props.places.data}/>\r\n    </div>\r\n));\r\n\r\nPlaces.getInitialProps = async function(context) {\r\n    const {objectId} = context.query;\r\n    const res = await fetch(NPS_Query(\"parks\", objectId));\r\n    const parks = await res.json();\r\n\r\n    const res2 = await fetch(NPS_Query(\"places\", objectId));\r\n    const places = await res2.json();\r\n\r\n    console.log(`Fetched ${parks.data[0].fullName}`);\r\n\r\n    return {parks, places};\r\n};\r\n\r\nexport default Places;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AAEA;AADA;AAIA;AADA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AAEA;AADA;AAIA;AAEA;AADA;AAIA;AACA;AADA;AAlDA;AAAA;AACA;AAsDA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAdA;AAoBA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AAPA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AAEA;AARA;AAUA;AAAA;AAAA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}